{"ast":null,"code":"const FIREBASE_DOMAIN = 'https://react-http-f4180-default-rtdb.firebaseio.com/';\nexport async function getAllQuotes() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const data = await response.jreson();\n  console.log(data);\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key]\n    };\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.');\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data\n  };\n  return loadedQuote;\n}\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: 'POST',\n    body: JSON.stringify(quoteData),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  return null;\n}\nexport async function addComment(requestData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`, {\n    method: 'POST',\n    body: JSON.stringify(requestData.commentData),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n\n  return {\n    commentId: data.name\n  };\n}\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not get comments.');\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key]\n    };\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}","map":{"version":3,"names":["FIREBASE_DOMAIN","getAllQuotes","response","fetch","data","jreson","console","log","ok","Error","message","transformedQuotes","key","quoteObj","id","push","getSingleQuote","quoteId","json","loadedQuote","addQuote","quoteData","method","body","JSON","stringify","headers","addComment","requestData","commentData","commentId","name","getAllComments","transformedComments","commentObj"],"sources":["/Users/chchen/Andy暫存/JS_ReactUdemy/project_2/留言板/src/lib/api.js"],"sourcesContent":["const FIREBASE_DOMAIN = 'https://react-http-f4180-default-rtdb.firebaseio.com/';\n\nexport async function getAllQuotes() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const data = await response.jreson();\n  console.log(data);\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\n\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.');\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data,\n  };\n\n  return loadedQuote;\n}\n\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: 'POST',\n    body: JSON.stringify(quoteData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  return null;\n}\n\nexport async function addComment(requestData) {\n  \n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`, {\n    method: 'POST',\n    body: JSON.stringify(requestData.commentData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n  \n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n\n  return { commentId: data.name };\n}\n\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not get comments.');\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}