{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","console","log","submitFormHandler","event","preventDefault","commentData","text","current","value","quoteId","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuotesDetail","match","useRouteMatch","getSingleQuote","loadedQuote","path","exact","to","url"],"mappings":"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","file":"static/js/3.6c0fdf3a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__iZX-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2Te8b\",\"loading\":\"NewCommentForm_loading__2veC2\",\"control\":\"NewCommentForm_control__3NVeP\",\"actions\":\"NewCommentForm_actions__2fwWP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__24mbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__valp0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__nE9T6\"};","import { useRef, useEffect } from 'react';\nimport useHttp from '../../hooks/use-http';\nimport {addComment} from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n  const {sendRequest, status,error} = useHttp(addComment);\n\n  const { onAddedComment } = props; \n  useEffect(()=>{\n    if(status === 'completed' && !error){\n      console.log('completed && !error')\n      onAddedComment(); // to notify the parent component to do something\n    }\n  },[status,error,onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    sendRequest({commentData : {text:commentTextRef.current.value},quoteId : props.quoteId});\n    // optional: Could validate here\n\n    // send comment to server\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status==='pending' && <div className='centered'>\n      <LoadingSpinner/>\n      </div>\n\n      }\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentsList from \"./CommentsList\";\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const { quoteId } = params;\n\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    console.log('AddCommentHandler')\n    sendRequest(quoteId);\n  },[sendRequest,quoteId]); //avoid loop execution\n\n  let comments;\n  console.log('status '+status);\n  if (status === \"pending\") {\n    // console.log('pending');\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === \"completed\" && loadedComments && loadedComments.length > 0) {\n    // console.log('completed');\n    comments = <CommentsList comments={loadedComments}></CommentsList>;\n  }\n\n  if (\n    status === \"completed\" &&(\n    !loadedComments ||\n    loadedComments.length === 0)\n  ) {\n    console.log('pending empty');\n    comments = <p className=\"centered\">No comments were added yet!</p>;\n  }\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={quoteId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useParams, Route, Link, useRouteMatch } from \"react-router-dom\";\nimport { Fragment, useEffect } from \"react\";\n// import Test from \"./Test\";\nimport useHttp from '../hooks/use-http';\nimport { getSingleQuote } from \"../lib/api\";\nimport Comments from \"../components/comments/Comments\";\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\n\nconst DUMMY_QUOTES = [\n  { id: \"q1\", author: \"Max\", text: \"Learning React is fun\" },\n  { id: \"q2\", author: \"Maxis\", text: \"Learning React is great\" },\n];\n\nconst QuotesDetail = () => {\n  const match = useRouteMatch();\n  const params = useParams();\n\n  const { quoteId } = params;\n\n  const { sendRequest, status, data:loadedQuote, error} = useHttp(getSingleQuote,true);\n\n  useEffect(()=>{\n    sendRequest(quoteId);\n  },[sendRequest,quoteId]);\n  console.log('match'+match);\n//   const quote = DUMMY_QUOTES.find((quote) => quote.id === params.quoteId);\n\n  if (status === 'pending'){\n    return <div className='centered'>\n        <LoadingSpinner/>\n    </div>\n  }\n\n  if (error){\n    return <p className=\"centered\">{error}</p>;\n  }\n\n  if (!loadedQuote.text) {\n    return <p>No quote found!</p>;\n  }\n  return (\n    <Fragment>\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\n      <Route path={match.path} exact>\n        <div className=\"centered\">\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\n            Load Comments\n          </Link>\n        </div>\n      </Route>\n      <Route path={`${match.path}/comments`}>\n      {/* <Route path={`/quotes/${params.quoteId}/comments`}> */}\n        <Comments />\n      </Route>\n    </Fragment>\n  );\n};\n\nexport default QuotesDetail;\n"],"sourceRoot":""}